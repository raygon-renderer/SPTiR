(function() {var implementors = {};
implementors["sptir"] = [{"text":"impl UnwindSafe for ColorMatrix3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xyY","synthetic":true,"types":[]},{"text":"impl&lt;FROM, TO&gt; UnwindSafe for Adaptation&lt;FROM, TO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FROM: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TO: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;CS&gt; UnwindSafe for RGBColor&lt;CS&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CS: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;CS&gt; UnwindSafe for RGBAColor&lt;CS&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CS: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBPrimaries","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ACES_AP0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ACES_AP1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRGB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Film","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Matrix4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Point3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transform3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vector3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sample1D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sample2D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndependentSampler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleDimension1D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleDimension2D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSeries","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PiecewiseLinearSpectrum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpectralRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpectralWavelengths","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpectralRadiance","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpectralReflectance","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpectralFlux","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XYZSpectrum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aggregate","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()