var searchIndex = JSON.parse('{\
"main":{"doc":"","i":[[5,"main","main","",null,[[]]]],"p":[]},\
"sptir":{"doc":"Spectral Path Tracing in Rust =============================","i":[[0,"color","sptir","",null,null],[3,"ColorMatrix3","sptir::color","",null,null],[12,"0","","",0,null],[3,"xyY","","",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[12,"y_prime","","",1,null],[3,"RGBColor","","",null,null],[12,"r","","",2,null],[12,"g","","",2,null],[12,"b","","",2,null],[3,"RGBPrimaries","","",null,null],[12,"r","","",3,null],[12,"g","","",3,null],[12,"b","","",3,null],[11,"const_inverse","","",0,[[],["colormatrix3",3]]],[11,"const_mul","","",0,[[["colormatrix3",3]],["colormatrix3",3]]],[11,"const_transform","","",0,[[["xyzspectrum",3]],["xyzspectrum",3]]],[11,"const_transpose","","",0,[[],["colormatrix3",3]]],[8,"Colorspace","","",null,null],[11,"to_xyz","","",1,[[],["xyzspectrum",3]]],[11,"rgb_to_xyz","","",3,[[["xyzspectrum",3]],["colormatrix3",3]]],[0,"film","sptir","",null,null],[3,"Film","sptir::film","",null,null],[12,"pixels","","",4,null],[12,"width","","",4,null],[12,"height","","",4,null],[0,"geometry","sptir","",null,null],[3,"Matrix4","sptir::geometry","A 4x4 matrix",null,null],[12,"0","","",5,null],[3,"Vector3","","",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"z","","",6,null],[18,"IDENTITY","","The Identity matrix",5,null],[11,"new","","",5,[[],["matrix4",3]]],[18,"ZERO","","",6,null],[18,"UP","","",6,null],[11,"new","","",6,[[],["vector3",3]]],[11,"dot","","The dot product (or scalar product) of two N-dimensional…",6,[[]]],[11,"cross","","The cross product (or vector product) is a binary…",6,[[],["vector3",3]]],[11,"norm_squared","","",6,[[]]],[11,"norm","","Compute the Euclidean norm (`$\\\\|\\\\mathbf{v}\\\\|$`) of the…",6,[[]]],[11,"normalize","","Normalizes the vector such that the 3D Euclidean norm is 1.0",6,[[],["vector3",3]]],[0,"math","sptir","",null,null],[5,"integrate","sptir::math","",null,[[]]],[0,"spectrum","sptir","",null,null],[3,"HeroWavelengthSample","sptir::spectrum","Hero-Wavelength Spectrum Sample",null,null],[12,"lambda","","The sampled wavelengths (`$\\\\lambda$`)",7,null],[12,"energy","","The Radiant Flux (`$\\\\Phi_{\\\\mathrm{e}}$`) being carried at…",7,null],[3,"XYZSpectrum","","",null,null],[12,"x","","",8,null],[12,"y","","",8,null],[12,"z","","",8,null],[3,"SpectralRange","","",null,null],[12,"min","","",9,null],[12,"max","","",9,null],[12,"y_integral","","",9,null],[6,"Lanes","","Helper type to define how many wavelength samples are…",null,null],[17,"NUM_LANES","","Defines how many wavelengths should be used for HWSS",null,null],[18,"ZERO","","",8,null],[11,"new","","",8,[[],["xyzspectrum",3]]],[11,"from_wavelength","","",8,[[],["xyzspectrum",3]]],[11,"new","","",9,[[],["spectralrange",3]]],[11,"hero_to_xyz","","`math X=\\\\sum_{j=0}^{C} \\\\left({\\\\frac {1}{N}}\\\\int _{\\\\lambda…",9,[[["herowavelengthsample",3]],["xyzspectrum",3]]],[11,"sample_hero","","Samples a hero wavelength and `NUM_LANES` number of…",9,[[],["herowavelengthsample",3]]],[11,"hero","","",7,[[]]],[11,"from","sptir::color","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","sptir::film","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","sptir::geometry","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","sptir::spectrum","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"clone","sptir::color","",0,[[],["colormatrix3",3]]],[11,"clone","","",1,[[],["xyy",3]]],[11,"clone","","",2,[[],["rgbcolor",3]]],[11,"clone","","",3,[[],["rgbprimaries",3]]],[11,"clone","sptir::geometry","",5,[[],["matrix4",3]]],[11,"clone","","",6,[[],["vector3",3]]],[11,"clone","sptir::spectrum","",7,[[],["herowavelengthsample",3]]],[11,"clone","","",8,[[],["xyzspectrum",3]]],[11,"clone","","",9,[[],["spectralrange",3]]],[11,"eq","sptir::color","",0,[[["colormatrix3",3]]]],[11,"ne","","",0,[[["colormatrix3",3]]]],[11,"eq","","",1,[[["xyy",3]]]],[11,"ne","","",1,[[["xyy",3]]]],[11,"eq","","",2,[[["rgbcolor",3]]]],[11,"ne","","",2,[[["rgbcolor",3]]]],[11,"eq","","",3,[[["rgbprimaries",3]]]],[11,"ne","","",3,[[["rgbprimaries",3]]]],[11,"eq","sptir::geometry","",5,[[["matrix4",3]]]],[11,"ne","","",5,[[["matrix4",3]]]],[11,"eq","","",6,[[["vector3",3]]]],[11,"ne","","",6,[[["vector3",3]]]],[11,"eq","sptir::spectrum","",7,[[["herowavelengthsample",3]]]],[11,"ne","","",7,[[["herowavelengthsample",3]]]],[11,"eq","","",8,[[["xyzspectrum",3]]]],[11,"ne","","",8,[[["xyzspectrum",3]]]],[11,"eq","","",9,[[["spectralrange",3]]]],[11,"ne","","",9,[[["spectralrange",3]]]],[11,"fmt","sptir::color","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","sptir::geometry","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","sptir::spectrum","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"div","sptir::geometry","",6,[[],["vector3",3]]]],"p":[[3,"ColorMatrix3"],[3,"xyY"],[3,"RGBColor"],[3,"RGBPrimaries"],[3,"Film"],[3,"Matrix4"],[3,"Vector3"],[3,"HeroWavelengthSample"],[3,"XYZSpectrum"],[3,"SpectralRange"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);